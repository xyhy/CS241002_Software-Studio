{"version":3,"sources":["../../../../assets/Script/assets/Script/BrushPhysicsCollider.js"],"names":["MyPhysicsCollider","cc","Class","extends","PhysicsCollider","editor","menu","CC_EDITOR","requireComponent","RigidBody","properties","lineWidth","points","Vec2","_createShape","scale","shapes","polys","offset","polyIdx","i","length","posBegin","posEnd","linelen","sub","mag","angle","Math","atan2","y","x","PI","midPos","add","mul","shape","b2","PolygonShape","SetAsBox","push","module","exports"],"mappings":";;;;;;AAAA,IAAIA,oBAAoBC,GAAGC,KAAH,CAAS;AAC7BC,aAASF,GAAGG,eADiB;AAE7BC,YAAQ;AACJC,cAAMC,aAAa,mDADf;AAEJC,0BAAkBP,GAAGQ;AAFjB,KAFqB;AAM7BC,gBAAY;AACRC,mBAAW,EADH;AAERC,gBAAQ,CAACX,GAAGY,IAAJ;AAFA,KANiB;AAU7BC,kBAAc,sBAAUC,KAAV,EAAiB;AAC3B,YAAIC,SAAS,EAAb;;AAEA,YAAIC,QAAQ,KAAKL,MAAjB;AACA,YAAIM,SAAS,KAAKA,MAAlB;AACA;AACA,YAAIC,UAAU,CAAd;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,MAAMI,MAAN,GAAe,CAAnC,EAAsCD,GAAtC,EAA2C;AACvC,gBAAIE,WAAWL,MAAMG,CAAN,CAAf;AACA,gBAAIG,SAASN,MAAMG,IAAI,CAAV,CAAb;AACA,gBAAII,UAAUF,SAASG,GAAT,CAAaF,MAAb,EAAqBG,GAArB,EAAd;;AAEA,gBAAIC,QAAQC,KAAKC,KAAL,CAAWN,OAAOO,CAAP,GAAWR,SAASQ,CAA/B,EAAkCP,OAAOQ,CAAP,GAAWT,SAASS,CAAtD,IAA2DH,KAAKI,EAAL,GAAU,CAAjF;;AAEA,gBAAIC,SAASX,SAASY,GAAT,CAAaX,MAAb,EAAqBY,GAArB,CAAyB,GAAzB,CAAb;;AAEA,gBAAIC,QAAQ,IAAIC,GAAGC,YAAP,EAAZ;;AAEA,gBAAIF,KAAJ,EAAW;AACPA,sBAAMG,QAAN,CAAe,KAAK5B,SAAL,GAAiB,CAAjB,GAAqB,EAApC,EAAwCa,UAAU,CAAV,GAAc,EAAtD,EAA0D,IAAIa,GAAGxB,IAAP,CAAYoB,OAAOF,CAAP,GAAW,EAAvB,EAA2BE,OAAOH,CAAP,GAAW,EAAtC,CAA1D,EAAqGH,KAArG;;AAEAX,uBAAOwB,IAAP,CAAYJ,KAAZ;AACH;AACJ;;AAED,eAAOpB,MAAP;AACH;AApC4B,CAAT,CAAxB;;AAuCAyB,OAAOC,OAAP,GAAiB1C,iBAAjB","file":"BrushPhysicsCollider.js","sourceRoot":"../../../../assets/Script","sourcesContent":["var MyPhysicsCollider = cc.Class({\n    extends: cc.PhysicsCollider,\n    editor: {\n        menu: CC_EDITOR && 'i18n:MAIN_MENU.component.physics/Collider/Polygon',\n        requireComponent: cc.RigidBody\n    },\n    properties: {\n        lineWidth: 10,\n        points: [cc.Vec2]\n    },\n    _createShape: function (scale) {\n        var shapes = [];\n\n        var polys = this.points;\n        var offset = this.offset;\n        // console.log(polys);\n        var polyIdx = 0;\n        for (var i = 0; i < polys.length - 1; i++) {\n            var posBegin = polys[i];\n            var posEnd = polys[i + 1];\n            var linelen = posBegin.sub(posEnd).mag();\n\n            var angle = Math.atan2(posEnd.y - posBegin.y, posEnd.x - posBegin.x) - Math.PI / 2;\n\n            var midPos = posBegin.add(posEnd).mul(0.5);\n\n            var shape = new b2.PolygonShape();\n\n            if (shape) {\n                shape.SetAsBox(this.lineWidth / 2 / 32, linelen / 2 / 32, new b2.Vec2(midPos.x / 32, midPos.y / 32), angle);\n    \n                shapes.push(shape);\n            }\n        }\n\n        return shapes;\n    }\n});\n\nmodule.exports = MyPhysicsCollider;"]}